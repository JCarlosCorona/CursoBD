Y2007 <- EDA %>%
filter(year == 2007) %>%
rename(LExp2007 = lifeExp) %>%
select(-year)
LifeExpDelta <- merge(Y2002,Y2007)
Delta <- LifeExpDelta %>%
mutate(delta = (LExp2007-LExp2002)/LExp2002) %>%
arrange(desc(delta))
head(Delta)
Delta %>%
arrange(delta)
# Carga/Instalacion de Librerias ---------------------------------------------------------
if (!require("pacman"))
install.packages("pacman")
pacman::p_load("googleAnalyticsR",
"lubridate",
"ggplot2",
"gridExtra",
"tidyverse")
ga_auth()
#ID de la vista de GA.
ga.cuentas <- ga_account_list()
#Modificar el regex del nombre la cuenta para obtener el ID dequerido
cuentas <- ga.cuentas %>%
select(accountName, webPropertyName, viewName, viewId) %>%
filter(grepl("best",accountName,ignore.case = TRUE))
cuentas
#Colocar el numero de fila de la vista requerida
view.id <- cuentas$viewId[7]
#Fechas
start.date <- "2019-12-01"
end.date <- "2019-12-31"
#TRUE para dejar el sampleo de la data y FALSE para desactivarlo.
sampling <- FALSE
# Extracción de la Data de la API de Google Analytics (userType)-------------------------
#Dimension
dimensions <- c("shoppingStage")
#Metricas
metrics <- c("sessions")
#Primera llamada a la API
df <-  google_analytics(
viewId = view.id,
date_range = c(start.date,
end.date),
metrics = metrics,
dimensions = dimensions,
anti_sample = sampling
)
head(df)
View(df)
df[9,]
df[10,]
df[13,]
df[23,]
df[7,]
df[10,]
df[13,]
df[23,]
df[,1:24]
df[,2]
df[,1]
# Carga/Instalacion de Librerias ---------------------------------------------------------
if (!require("pacman"))
install.packages("pacman")
pacman::p_load("googleAnalyticsR",
"lubridate",
"ggplot2",
"gridExtra",
"tidyverse")
# Carga/Instalacion de Librerias ---------------------------------------------------------
if (!require("pacman"))
install.packages("pacman")
pacman::p_load("googleAnalyticsR",
"lubridate",
"ggplot2",
"gridExtra",
"tidyverse")
# Configuracion de Google Analytics----
ga_auth()
# ID de la vista de GA.
ga.cuentas <- ga_account_list()
# Modificar el regex del nombre la cuenta para obtener el ID requerido
cuentas <- ga.cuentas %>%
select(accountName, webPropertyName, viewName, viewId) %>%
filter(grepl("coppel",accountName,ignore.case = TRUE))
cuentas
# Colocar el numero de fila de la vista requerida
ViewId <- cuentas$viewId[7]
# Fechas
StartDate <- "2019-12-01"
EndDate <- "2019-12-31"
# TRUE para dejar el sampleo de la data y FALSE para desactivarlo.
sampling <- FALSE
# Funnel Steps----
DetalleProducto <- "-(pm|pr|im)-"
Carrito <- "\/AjaxOrderItemDisplayView?.*"
DatosEntrega <- "\/OrderShippingBillingView?.*"
RevisarOrden <- "\/SingleShipmentOrderSummaryView?.*"
ThankYouPage <- "\/OrderShippingBillingConfirmationView?.*"
# Extracción de la Data de la API de Google Analytics (userType)-------------------------
#Dimension
Dims <- c("productCategoryHierarchy")
#Metricas
Mets <- c("users")
# Segmentos
seg <- segment_ga4(PCAT.Muebles, segment_id = "gaid::J_CellbqT8KGfVJDSZAfLg")
# Filtros
DFilterS1 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = DetalleProducto)
DFilterS2 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = Carrito)
DFilterS3 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = DatosEntrega)
DFilterS4 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = RevisarOrden)
DFilterS5 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = ThankYouPage)
DimFilters <- filter_clause_ga4(list(DFilterS1,DFilterS2,DFilterS3,DFilterS4,DFilterS5), operator = "OR")
#Primera llamada a la API
df <-  google_analytics(
viewId = ViewId,
date_range = c(StartDate,
EndDate),
# segments = seg,
metrics = Mets,
dimensions = Dims,
dim_filters = DimFilters,
anti_sample = sampling
)
head(df)
View(df)
df <-  google_analytics(
viewId = ViewId,
date_range = c(StartDate,
EndDate),
# segments = seg,
metrics = Mets,
dimensions = Dims,
dim_filters = DimFilters,
anti_sample = sampling
)
DimFilters <- filter_clause_ga4(list(DFilterS1,DFilterS2,DFilterS3,DFilterS4,DFilterS5), operator = "OR")
DFilterS1 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = DetalleProducto)
DFilterS2 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = Carrito)
DFilterS3 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = DatosEntrega)
DFilterS4 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = RevisarOrden)
DFilterS5 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = ThankYouPage)
DetalleProducto <- "-(pm|pr|im)-"
Carrito <- "\/AjaxOrderItemDisplayView?.*"
DatosEntrega <- "\/OrderShippingBillingView?.*"
RevisarOrden <- "\/SingleShipmentOrderSummaryView?.*"
ThankYouPage <- "\/OrderShippingBillingConfirmationView?.*"
DetalleProducto <- "-(pm|pr|im)-"
Carrito <- "\\/AjaxOrderItemDisplayView?.*"
DatosEntrega <- "\\/OrderShippingBillingView?.*"
RevisarOrden <- "\\/SingleShipmentOrderSummaryView?.*"
ThankYouPage <- "\\/OrderShippingBillingConfirmationView?.*"
# Extracción de la Data de la API de Google Analytics (userType)-------------------------
#Dimension
Dims <- c("productCategoryHierarchy")
#Metricas
Mets <- c("users")
# Segmentos
seg <- segment_ga4(PCAT.Muebles, segment_id = "gaid::J_CellbqT8KGfVJDSZAfLg")
# Filtros
DFilterS1 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = DetalleProducto)
DFilterS2 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = Carrito)
DFilterS3 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = DatosEntrega)
DFilterS4 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = RevisarOrden)
DFilterS5 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = ThankYouPage)
DimFilters <- filter_clause_ga4(list(DFilterS1,DFilterS2,DFilterS3,DFilterS4,DFilterS5), operator = "OR")
#Primera llamada a la API
df <-  google_analytics(
viewId = ViewId,
date_range = c(StartDate,
EndDate),
# segments = seg,
metrics = Mets,
dimensions = Dims,
dim_filters = DimFilters,
anti_sample = sampling
)
head(df)
View(df)
df <-  google_analytics(
viewId = ViewId,
date_range = c(StartDate,
EndDate),
# segments = seg,
metrics = Mets,
# dimensions = Dims,
dim_filters = DimFilters,
anti_sample = sampling
)
head(df)
# Extracción de la Data de la API de Google Analytics (userType)-------------------------
#Dimension
Dims <- c("pagePath")
df <-  google_analytics(
viewId = ViewId,
date_range = c(StartDate,
EndDate),
# segments = seg,
metrics = Mets,
dimensions = Dims,
dim_filters = DimFilters,
anti_sample = sampling
)
head(df)
# Extracción de la Data de la API de Google Analytics (userType)-------------------------
#Dimension
Dims <- c("pagePath")
#Metricas
Mets <- c("users")
# Segmentos
seg <- segment_ga4(PCAT.Muebles, segment_id = "gaid::J_CellbqT8KGfVJDSZAfLg")
# Filtros
DFilterS1 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = DetalleProducto)
DFilterS2 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = Carrito)
DFilterS3 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = DatosEntrega)
DFilterS4 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = RevisarOrden)
DFilterS5 <- dim_filter(
dimension = "pagePath",
operator = "REGEXP",
expressions = ThankYouPage)
MFilter1 <- met_filter("users", "GREATER", 10)
DimFilters <- filter_clause_ga4(list(DFilterS1,DFilterS2,DFilterS3,DFilterS4,DFilterS5), operator = "OR")
MetFilters <- filter_clause_ga4(list(MFilter1), operator = "AND")
#Primera llamada a la API
df <-  google_analytics(
viewId = ViewId,
date_range = c(StartDate,
EndDate),
# segments = seg,
metrics = Mets,
met_filters = MetFilters,
dimensions = Dims,
dim_filters = DimFilters,
anti_sample = sampling
)
head(df)
#Primera llamada a la API
df <-  google_analytics(
viewId = ViewId,
date_range = c(StartDate,
EndDate),
# segments = seg,
metrics = Mets,
met_filters = MetFilters,
dimensions = Dims,
dim_filters = DimFilters,
anti_sample = sampling,
max = 100000
)
head(df)
con <- DBI::dbConnect(odbc::odbc(),
Driver   = "psqlODBC",
Server   = "35.226.152.95",
Database = "postgres",
UID      = rstudioapi::askForPassword("postgres"),
PWD      = rstudioapi::askForPassword("NerdyNovaEPa*"),
Port     = 5432)
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
View(sim1)
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 5)
)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 3)
)
ggplot(models, aes(a1, a2)) +
geom_point(data = filter(models, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
ggplot(models, aes(a1, a2)) +
geom_point(data = filter(models, rank(dist) <= 5), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid %>%
ggplot(aes(a1, a2)) +
geom_point(data = filter(grid, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
#> [1] 4.22 2.05
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
grid <- sim1 %>%
data_grid(x)
grid
grid <- grid %>%
add_predictions(sim1_mod)
grid
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
df <- tribble(
~y, ~x1, ~x2,
4, 2, 5,
5, 1, 6
)
model_matrix(df, y ~ x1)
ggplot(sim3, aes(x1, y)) +
geom_point(aes(colour = x2))
View(sim3)
mod1 <- lm(y ~ x1 + x2, data = sim3)
mod2 <- lm(y ~ x1 * x2, data = sim3)
grid <- sim3 %>%
data_grid(x1, x2) %>%
gather_predictions(mod1, mod2)
grid
ggplot(sim3, aes(x1, y, colour = x2)) +
geom_point() +
geom_line(data = grid, aes(y = pred)) +
facet_wrap(~ model)
?rcauchy
reprex:::reprex_addin()
version
library(tidiverse)
library(tidyverse)
base.rectangulo <- 10
altura.rectangulo <- 2
area.rectangulo <- base.rectangulo * altura.rectangulo
print(area.rectangulo)
base.traingulo <- 10
altura.rectangulo <- 2
area.traingulo <- base.traingulo * altura.traingulo
print(area.traingulo)
base.traingulo <- 10
altura.rectangulo <- 2
area.traingulo <- base.traingulo * altura.traingulo
base.triangulo <- 10
altura.rectangulo <- 2
area.triangulo <- base.triangulo * altura.triangulo
print(area.triangulo)
base.triangulo <- 10
altura.rectangulo <- 2
area.triangulo <- base.triangulo * altura.triangulo
print(area.triangulo)
base.triangulo <- 10
altura.triangulo <- 2
area.triangulo <- (base.triangulo * altura.triangulo)/2
print(area.triangulo)
radio <- 10
pi <- 3.1416
area.circulo<- (pi * radio^2)
area.circulo
# Area de un rectangulo
base.rectangulo <- 10
altura.rectangulo <- 2
area.rectangulo <- base.rectangulo * altura.rectangulo
print(area.rectangulo)
# Area de un rectangulo
base.triangulo <- 10
altura.triangulo <- 2
area.triangulo <- (base.triangulo * altura.triangulo)/2
print(area.triangulo)
# #Area de un Circulo
radio <- 10
pi <- 3.1416
area.circulo<- (pi * radio^2)
area.circulo
#Area de un Trapecio
baseMenor <- 15
baseMayor <- 30
altura.trapecio <- 10
area.trapecio<- ((baseMayor+baseMenor)/2)*altura.trapecio
area.trapecio
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
?ggplot2
help(ggplot)
View(mtcars)
source('~/Documents/GitHub/CursoBD/Modulo02.Programacion-con-R/Sesion01/Ejemplo-03.R', echo=TRUE)
write.csv(mtcars)
write.csv(mtcars,file = "mtcars.csv")
setwd("~/Documents/GitHub/CursoBD/Modulo02.Programacion-con-R/Sesion01")
write.csv(mtcars,file = "mtcars.csv")
library(readr)
Datos_abiertosRegistrosCHB <- read_csv("Datos_abiertosRegistrosCHB.csv")
View(Datos_abiertosRegistrosCHB)
?colnames
colnames(Datos_abiertosRegistrosCHB) <- c("estado","establecimiento","institucion")
View(Datos_abiertosRegistrosCHB)
Datos <- read_csv(file = "Datos.csv")
View(Datos)
Data <- Datos_abiertosRegistrosCHB
Datos <- read_csv(file = "Datos.csv")
Data <- Datos_abiertosRegistrosCHB
View(Datos)
Datos <- read_csv(file = "Datos.csv")
View(Datos)
library(tidyverse)
library(ggplot2)
glimpse(mtcars)
head(mtcars)
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
}))
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
setwd("~/Documents/GitHub/CursoBD/Modulo02.Programacion-con-R/Sesion01")
